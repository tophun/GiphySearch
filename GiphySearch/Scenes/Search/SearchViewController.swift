//
//  SearchViewController.swift
//  GiphySearch
//
//  Created by Collie on 2022/06/29.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SearchDisplayLogic: AnyObject {
    func displayLoading()
    func displayError(_ error: Error)
    func displayTrending(viewModel: Search.Trending.ViewModel)
    func displaySearch(viewModel: Search.Search.ViewModel)
}

class SearchViewController: UIViewController, SearchDisplayLogic {
    var interactor: SearchBusinessLogic?
    var router: (NSObjectProtocol & SearchRoutingLogic & SearchDataPassing)?
    
    @IBOutlet weak var collectionView: UICollectionView! {
        didSet {
            collectionView.register(UINib(nibName: "GifItemCell", bundle: nil), forCellWithReuseIdentifier: "GifItemCell")
        }
    }
    
    lazy var searchController: UISearchController = {
        let searchController = UISearchController(searchResultsController: nil)
        searchController.searchBar.delegate = self
        return searchController
    }()
    
    private var gifs: [Gif] = []
    private var totalCount: Int = 0
    private var isSearch: Bool = false
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = SearchInteractor()
        let presenter = SearchPresenter()
        let router = SearchRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        fetchTrending()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        collectionView.reloadData()
    }
    
    private func fetchTrending() {
        let request = Search.Trending.Request(offset: 0)
        interactor?.trending(request: request)
    }
    
    private func search(_ query: String) {
        let request = Search.Search.Request(query: query, offset: gifs.count)
        interactor?.search(request: request)
    }
    
    private func reset() {
        self.gifs.removeAll()
        self.collectionView.reloadData()
    }
}

extension SearchViewController {
    private func setupView() {
        navigationItem.title = "Seaerch"
        navigationController?.navigationBar.prefersLargeTitles = true
        navigationController?.navigationItem.largeTitleDisplayMode = .never
        navigationItem.searchController = searchController
    }
}

// MARK: - DisplayLogic

extension SearchViewController {
    func displayLoading() {
        // Todo: Loading indicator show
    }
    
    func displayError(_ error: Error) {
        let alert = UIAlertController(title: "알림", message: error.localizedDescription, preferredStyle: .alert)
        alert.addAction(.init(title: "확인", style: .default))
        present(alert, animated: true)
    }
    
    func displayTrending(viewModel: Search.Trending.ViewModel) {
        // Todo: Loading indicator hidden
        self.gifs = viewModel.gif
        self.totalCount = 0
        self.isSearch = false
        collectionView.reloadData()
    }
    
    func displaySearch(viewModel: Search.Search.ViewModel) {
        self.gifs += viewModel.gif
        self.totalCount = viewModel.totalCount
        self.isSearch = true
        collectionView.reloadData()
    }
}

// MARK: - UISearchBarDelegate

extension SearchViewController: UISearchBarDelegate {
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        guard let query = searchBar.text, !query.isEmpty else { return }
        reset()
        search(query)
    }
    
    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
        guard isSearch else { return }
        reset()
        fetchTrending()
    }
}

extension SearchViewController: UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return gifs.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: String(describing: GifItemCell.self), for: indexPath) as? GifItemCell else { fatalError() }
        cell.bind(gifs[indexPath.row])
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, willDisplay cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {
        if isSearch && indexPath.row == gifs.count - 1 && gifs.count < totalCount {
            guard let query = searchController.searchBar.text else { return }
            search(query)
        }
        
        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: String(describing: GifItemCell.self), for: indexPath) as? GifItemCell else { fatalError() }
        cell.loadGif()
    }
    
    func collectionView(_ collectionView: UICollectionView, didEndDisplaying cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {
        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: String(describing: GifItemCell.self), for: indexPath) as? GifItemCell else { fatalError() }
        cell.cancel()
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let width: CGFloat = trunc(UIScreen.main.bounds.width / 2)
        let height: CGFloat = width
        return CGSize(width: width, height: height)
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        router?.routeToDetail()
    }
    
    func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {
        switch kind {
        case UICollectionView.elementKindSectionHeader:
            guard let header = collectionView.dequeueReusableSupplementaryView(ofKind: kind, withReuseIdentifier: String(describing: SearchHeaderViewCell.self), for: indexPath) as? SearchHeaderViewCell else { fatalError() }
            header.titleLabel.text = isSearch ? "Result(\(totalCount))" : "Trending"
            return header
            
        default:
            assert(false, "")
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForHeaderInSection section: Int) -> CGSize {
        if gifs.isEmpty {
            return .zero
        }
        return CGSize(width: collectionView.frame.width, height: 45)
    }
}
